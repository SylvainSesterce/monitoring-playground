---
- name: Configure VMs
  hosts: all
  become: true
  roles:
    - packages
    - role: grafana.grafana.alloy
      vars:
        alloy_config: |
          prometheus.scrape "default" {
              targets = [
                {
                    "__address__" = "127.0.0.1:12345",
                    application   = "alloy",
                    environmennt  = "production",
                },
              ]
              forward_to = [prometheus.remote_write.prom.receiver]
          }
          prometheus.remote_write "prom" {
            endpoint {
                url = "http://mimir1:8080/api/v1/push"
                headers = {
                  "X-Scope-OrgID" = "staging",
                }
            }
          }
  tasks:
    - name: Install local ssh key
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', '/home/tassadar/.ssh/framework.pub') }}"

- name: Deploy Loki using the default configuration
  hosts: loki
  become: true
  roles:
    - role: grafana.grafana.loki

- name: Deploy mimir
  hosts: mimir
  become: true
  tasks:
    - name: Deploy minio on docker
      community.docker.docker_container:
        name: minio-mimir
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: "testtest"
          MINIO_ROOT_PASSWORD: "testtest"
          MINIO_DEFAULT_BUCKETS: "mimir"
        image: bitnami/minio:latest
    - name: Install mimir
      ansible.builtin.include_role:
        name: grafana.grafana.mimir
      vars:
        # Run against minio blob store backed, see readme for local setup or mimir docs for Azure,   AWS, etc.
        mimir_storage:
          storage:
            backend: s3
            s3:
              endpoint: localhost:9000
              access_key_id: testtest
              secret_access_key: testtest
              insecure: true
              bucket_name: mimir

        # Blocks storage requires a prefix when using a common object storage bucket.
        mimir_blocks_storage:
          storage_prefix: blocks
          tsdb:
            dir: "{{ mimir_working_path}}/ingester"

        # Use memberlist, a gossip-based protocol, to enable the 3 Mimir replicas to communicate
        mimir_memberlist:
          join_members:
            - mimir1:7946
            - mimir2:7946
            - mimir3:7946

- name: Deploy Grafana
  hosts: grafana
  roles:
    - role: grafana.grafana.grafana
      vars:
        grafana_ini:
          security:
            admin_user: admin
            admin_password: admin
        #grafana_dashboards:
        #  - dashboard_id: 111
        #    revision_id: 1
        #    datasource: prometheus
